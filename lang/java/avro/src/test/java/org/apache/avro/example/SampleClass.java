/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.avro.example;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SampleClass extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 581315715773215634L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SampleClass\",\"namespace\":\"example\",\"fields\":[{\"name\":\"string\",\"type\":[\"string\",\"null\"]},{\"name\":\"null_field\",\"type\":[\"null\"]},{\"name\":\"int\",\"type\":[\"int\",\"null\"]},{\"name\":\"float\",\"type\":[\"float\",\"null\"]},{\"name\":\"double\",\"type\":[\"double\",\"null\"]},{\"name\":\"bytes\",\"type\":[\"bytes\",\"null\"]},{\"name\":\"boolean\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"long\",\"type\":[\"long\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SampleClass> ENCODER =
      new BinaryMessageEncoder<SampleClass>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SampleClass> DECODER =
      new BinaryMessageDecoder<SampleClass>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SampleClass> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SampleClass> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SampleClass> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SampleClass>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SampleClass to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SampleClass from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SampleClass instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SampleClass fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence string;
  private java.lang.Object null_field;
  private java.lang.Integer int$;
  private java.lang.Float float$;
  private java.lang.Double double$;
  private java.nio.ByteBuffer bytes;
  private java.lang.Boolean boolean$;
  private java.lang.Long long$;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SampleClass() {}

  /**
   * All-args constructor.
   * @param string The new value for string
   * @param null_field The new value for null_field
   * @param int$ The new value for int
   * @param float$ The new value for float
   * @param double$ The new value for double
   * @param bytes The new value for bytes
   * @param boolean$ The new value for boolean
   * @param long$ The new value for long
   */
  public SampleClass(java.lang.CharSequence string, java.lang.Object null_field, java.lang.Integer int$, java.lang.Float float$, java.lang.Double double$, java.nio.ByteBuffer bytes, java.lang.Boolean boolean$, java.lang.Long long$) {
    this.string = string;
    this.null_field = null_field;
    this.int$ = int$;
    this.float$ = float$;
    this.double$ = double$;
    this.bytes = bytes;
    this.boolean$ = boolean$;
    this.long$ = long$;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return string;
    case 1: return null_field;
    case 2: return int$;
    case 3: return float$;
    case 4: return double$;
    case 5: return bytes;
    case 6: return boolean$;
    case 7: return long$;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: string = (java.lang.CharSequence)value$; break;
    case 1: null_field = value$; break;
    case 2: int$ = (java.lang.Integer)value$; break;
    case 3: float$ = (java.lang.Float)value$; break;
    case 4: double$ = (java.lang.Double)value$; break;
    case 5: bytes = (java.nio.ByteBuffer)value$; break;
    case 6: boolean$ = (java.lang.Boolean)value$; break;
    case 7: long$ = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'string' field.
   * @return The value of the 'string' field.
   */
  public java.lang.CharSequence getString() {
    return string;
  }


  /**
   * Sets the value of the 'string' field.
   * @param value the value to set.
   */
  public void setString(java.lang.CharSequence value) {
    this.string = value;
  }

  /**
   * Gets the value of the 'null_field' field.
   * @return The value of the 'null_field' field.
   */
  public java.lang.Object getNullField() {
    return null_field;
  }


  /**
   * Sets the value of the 'null_field' field.
   * @param value the value to set.
   */
  public void setNullField(java.lang.Object value) {
    this.null_field = value;
  }

  /**
   * Gets the value of the 'int$' field.
   * @return The value of the 'int$' field.
   */
  public java.lang.Integer getInt$() {
    return int$;
  }


  /**
   * Sets the value of the 'int$' field.
   * @param value the value to set.
   */
  public void setInt$(java.lang.Integer value) {
    this.int$ = value;
  }

  /**
   * Gets the value of the 'float$' field.
   * @return The value of the 'float$' field.
   */
  public java.lang.Float getFloat$() {
    return float$;
  }


  /**
   * Sets the value of the 'float$' field.
   * @param value the value to set.
   */
  public void setFloat$(java.lang.Float value) {
    this.float$ = value;
  }

  /**
   * Gets the value of the 'double$' field.
   * @return The value of the 'double$' field.
   */
  public java.lang.Double getDouble$() {
    return double$;
  }


  /**
   * Sets the value of the 'double$' field.
   * @param value the value to set.
   */
  public void setDouble$(java.lang.Double value) {
    this.double$ = value;
  }

  /**
   * Gets the value of the 'bytes' field.
   * @return The value of the 'bytes' field.
   */
  public java.nio.ByteBuffer getBytes() {
    return bytes;
  }


  /**
   * Sets the value of the 'bytes' field.
   * @param value the value to set.
   */
  public void setBytes(java.nio.ByteBuffer value) {
    this.bytes = value;
  }

  /**
   * Gets the value of the 'boolean$' field.
   * @return The value of the 'boolean$' field.
   */
  public java.lang.Boolean getBoolean$() {
    return boolean$;
  }


  /**
   * Sets the value of the 'boolean$' field.
   * @param value the value to set.
   */
  public void setBoolean$(java.lang.Boolean value) {
    this.boolean$ = value;
  }

  /**
   * Gets the value of the 'long$' field.
   * @return The value of the 'long$' field.
   */
  public java.lang.Long getLong$() {
    return long$;
  }


  /**
   * Sets the value of the 'long$' field.
   * @param value the value to set.
   */
  public void setLong$(java.lang.Long value) {
    this.long$ = value;
  }

  /**
   * Creates a new SampleClass RecordBuilder.
   * @return A new SampleClass RecordBuilder
   */
  public static SampleClass.Builder newBuilder() {
    return new SampleClass.Builder();
  }

  /**
   * Creates a new SampleClass RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SampleClass RecordBuilder
   */
  public static SampleClass.Builder newBuilder(SampleClass.Builder other) {
    if (other == null) {
      return new SampleClass.Builder();
    } else {
      return new SampleClass.Builder(other);
    }
  }

  /**
   * Creates a new SampleClass RecordBuilder by copying an existing SampleClass instance.
   * @param other The existing instance to copy.
   * @return A new SampleClass RecordBuilder
   */
  public static SampleClass.Builder newBuilder(SampleClass other) {
    if (other == null) {
      return new SampleClass.Builder();
    } else {
      return new SampleClass.Builder(other);
    }
  }

  /**
   * RecordBuilder for SampleClass instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SampleClass>
    implements org.apache.avro.data.RecordBuilder<SampleClass> {

    private java.lang.CharSequence string;
    private java.lang.Object null_field;
    private java.lang.Integer int$;
    private java.lang.Float float$;
    private java.lang.Double double$;
    private java.nio.ByteBuffer bytes;
    private java.lang.Boolean boolean$;
    private java.lang.Long long$;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(SampleClass.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.string)) {
        this.string = data().deepCopy(fields()[0].schema(), other.string);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.null_field)) {
        this.null_field = data().deepCopy(fields()[1].schema(), other.null_field);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.int$)) {
        this.int$ = data().deepCopy(fields()[2].schema(), other.int$);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.float$)) {
        this.float$ = data().deepCopy(fields()[3].schema(), other.float$);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.double$)) {
        this.double$ = data().deepCopy(fields()[4].schema(), other.double$);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.bytes)) {
        this.bytes = data().deepCopy(fields()[5].schema(), other.bytes);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.boolean$)) {
        this.boolean$ = data().deepCopy(fields()[6].schema(), other.boolean$);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.long$)) {
        this.long$ = data().deepCopy(fields()[7].schema(), other.long$);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing SampleClass instance
     * @param other The existing instance to copy.
     */
    private Builder(SampleClass other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.string)) {
        this.string = data().deepCopy(fields()[0].schema(), other.string);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.null_field)) {
        this.null_field = data().deepCopy(fields()[1].schema(), other.null_field);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.int$)) {
        this.int$ = data().deepCopy(fields()[2].schema(), other.int$);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.float$)) {
        this.float$ = data().deepCopy(fields()[3].schema(), other.float$);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.double$)) {
        this.double$ = data().deepCopy(fields()[4].schema(), other.double$);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bytes)) {
        this.bytes = data().deepCopy(fields()[5].schema(), other.bytes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.boolean$)) {
        this.boolean$ = data().deepCopy(fields()[6].schema(), other.boolean$);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.long$)) {
        this.long$ = data().deepCopy(fields()[7].schema(), other.long$);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'string' field.
      * @return The value.
      */
    public java.lang.CharSequence getString() {
      return string;
    }


    /**
      * Sets the value of the 'string' field.
      * @param value The value of 'string'.
      * @return This builder.
      */
    public SampleClass.Builder setString(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.string = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'string' field has been set.
      * @return True if the 'string' field has been set, false otherwise.
      */
    public boolean hasString() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'string' field.
      * @return This builder.
      */
    public SampleClass.Builder clearString() {
      string = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'null_field' field.
      * @return The value.
      */
    public java.lang.Object getNullField() {
      return null_field;
    }


    /**
      * Sets the value of the 'null_field' field.
      * @param value The value of 'null_field'.
      * @return This builder.
      */
    public SampleClass.Builder setNullField(java.lang.Object value) {
      validate(fields()[1], value);
      this.null_field = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'null_field' field has been set.
      * @return True if the 'null_field' field has been set, false otherwise.
      */
    public boolean hasNullField() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'null_field' field.
      * @return This builder.
      */
    public SampleClass.Builder clearNullField() {
      null_field = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'int$' field.
      * @return The value.
      */
    public java.lang.Integer getInt$() {
      return int$;
    }


    /**
      * Sets the value of the 'int$' field.
      * @param value The value of 'int$'.
      * @return This builder.
      */
    public SampleClass.Builder setInt$(java.lang.Integer value) {
      validate(fields()[2], value);
      this.int$ = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'int$' field has been set.
      * @return True if the 'int$' field has been set, false otherwise.
      */
    public boolean hasInt$() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'int$' field.
      * @return This builder.
      */
    public SampleClass.Builder clearInt$() {
      int$ = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'float$' field.
      * @return The value.
      */
    public java.lang.Float getFloat$() {
      return float$;
    }


    /**
      * Sets the value of the 'float$' field.
      * @param value The value of 'float$'.
      * @return This builder.
      */
    public SampleClass.Builder setFloat$(java.lang.Float value) {
      validate(fields()[3], value);
      this.float$ = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'float$' field has been set.
      * @return True if the 'float$' field has been set, false otherwise.
      */
    public boolean hasFloat$() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'float$' field.
      * @return This builder.
      */
    public SampleClass.Builder clearFloat$() {
      float$ = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'double$' field.
      * @return The value.
      */
    public java.lang.Double getDouble$() {
      return double$;
    }


    /**
      * Sets the value of the 'double$' field.
      * @param value The value of 'double$'.
      * @return This builder.
      */
    public SampleClass.Builder setDouble$(java.lang.Double value) {
      validate(fields()[4], value);
      this.double$ = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'double$' field has been set.
      * @return True if the 'double$' field has been set, false otherwise.
      */
    public boolean hasDouble$() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'double$' field.
      * @return This builder.
      */
    public SampleClass.Builder clearDouble$() {
      double$ = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytes' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getBytes() {
      return bytes;
    }


    /**
      * Sets the value of the 'bytes' field.
      * @param value The value of 'bytes'.
      * @return This builder.
      */
    public SampleClass.Builder setBytes(java.nio.ByteBuffer value) {
      validate(fields()[5], value);
      this.bytes = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'bytes' field has been set.
      * @return True if the 'bytes' field has been set, false otherwise.
      */
    public boolean hasBytes() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'bytes' field.
      * @return This builder.
      */
    public SampleClass.Builder clearBytes() {
      bytes = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'boolean$' field.
      * @return The value.
      */
    public java.lang.Boolean getBoolean$() {
      return boolean$;
    }


    /**
      * Sets the value of the 'boolean$' field.
      * @param value The value of 'boolean$'.
      * @return This builder.
      */
    public SampleClass.Builder setBoolean$(java.lang.Boolean value) {
      validate(fields()[6], value);
      this.boolean$ = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'boolean$' field has been set.
      * @return True if the 'boolean$' field has been set, false otherwise.
      */
    public boolean hasBoolean$() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'boolean$' field.
      * @return This builder.
      */
    public SampleClass.Builder clearBoolean$() {
      boolean$ = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'long$' field.
      * @return The value.
      */
    public java.lang.Long getLong$() {
      return long$;
    }


    /**
      * Sets the value of the 'long$' field.
      * @param value The value of 'long$'.
      * @return This builder.
      */
    public SampleClass.Builder setLong$(java.lang.Long value) {
      validate(fields()[7], value);
      this.long$ = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'long$' field has been set.
      * @return True if the 'long$' field has been set, false otherwise.
      */
    public boolean hasLong$() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'long$' field.
      * @return This builder.
      */
    public SampleClass.Builder clearLong$() {
      long$ = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SampleClass build() {
      try {
        SampleClass record = new SampleClass();
        record.string = fieldSetFlags()[0] ? this.string : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.null_field = fieldSetFlags()[1] ? this.null_field :  defaultValue(fields()[1]);
        record.int$ = fieldSetFlags()[2] ? this.int$ : (java.lang.Integer) defaultValue(fields()[2]);
        record.float$ = fieldSetFlags()[3] ? this.float$ : (java.lang.Float) defaultValue(fields()[3]);
        record.double$ = fieldSetFlags()[4] ? this.double$ : (java.lang.Double) defaultValue(fields()[4]);
        record.bytes = fieldSetFlags()[5] ? this.bytes : (java.nio.ByteBuffer) defaultValue(fields()[5]);
        record.boolean$ = fieldSetFlags()[6] ? this.boolean$ : (java.lang.Boolean) defaultValue(fields()[6]);
        record.long$ = fieldSetFlags()[7] ? this.long$ : (java.lang.Long) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SampleClass>
    WRITER$ = (org.apache.avro.io.DatumWriter<SampleClass>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SampleClass>
    READER$ = (org.apache.avro.io.DatumReader<SampleClass>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










